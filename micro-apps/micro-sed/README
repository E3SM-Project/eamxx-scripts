
===============================================================================
High level:
===============================================================================

This directory contains all the code associated with the micro-app created
for experimenting with various implemenations of the rain sedimentation
component of p3.

We settled on three implementations of rain sedimentation:
"ref" : The reference fortran implementation taken from p3. We took as little
        from p3 as we could and also tried to minimize modifications. The main
        modification was to add openmp threading so that we could get meaningful
        comparisons with C++ Kokkos implementations.
"vanilla" : This implementation was made by porting "ref" to C++ using Kokkos Views
            as the MD-array data structure. We made no effort to do any improvements
            besides the language change, so this is a direct, naive translation of the
            fortran.
"final" : This implementation represents what we think a good C++ rain sedimentaion
          should look like. This implementation should serve as a guideline/example for
          future C++/Kokkos rewrites of scientific fortran code.

Note that renaming, adding, or removing implementations will have an impact outside this
directly, specifically on the testing and performance gathering convenience scripts.

===============================================================================
Code layout:
===============================================================================

For each implemenation above (not including "ref" which just dives into fortran), you will see:
* A driver cpp file. This gets compiled into a exe and handles basic setup and argument parsing.
* A p3_${impl}.hpp file, this has the declaration of the MicroSedFunc${impl} class which
  encapsulates that particular impl.
* A p3_${impl}_impl.hpp file, this has the definitions for the above class
* A p3_${impl}.cpp which has the explicit template instatiation for the above class.

===============================================================================
Code flow:
===============================================================================

* Driver
  - p3_common:micro_sed_func_kokkos_wrap (templated on the desired impl class)
    * Construct impl class
    * Setup inputs (calls to initial_conditions to populate)
    * Repeat loop for timer resolution
      - Reset input
      - Time step loop
        * Call impl class' main impl function (micro_sed_func)
          - The "final" impl has better functional decomposition, so it makes calls
            to things in p3_functions.hpp (which follows the ETI pattern (hpp, impl.hpp, cpp))
    * Dump output to file
