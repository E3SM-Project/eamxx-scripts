#!/usr/bin/env python3

"""
Run different versions of an app and compare performance. It is
expected that this will be run from micro-apps directory.
"""

from utils import run_cmd_no_fail, run_cmd, expect, check_minimum_python_version, median
check_minimum_python_version(3, 4)

import argparse, sys, os, tempfile, re, socket
from collections import OrderedDict

###############################################################################
class ScalingExp(object):
###############################################################################

    def __init__(self, argmap, threads, arg_str):
        try:
            self.varname, self.scale_factor, self.upper_limit = arg_str.split(":")
            self.scale_factor = float(self.scale_factor)
            self.upper_limit  = int(self.upper_limit)
        except Exception:
            expect(False, "Scaling experiment needs to be in format VARNAME:SCALE_FACTOR:MAX")

        self.args = list(argmap.keys())
        for name, val in argmap.items():
            setattr(self, name, val)

        self.threads = threads

        expect(self.varname in dir(self), "Unknown varname '{}'".format(self.varname))

    def should_continue(self):
        return getattr(self, self.varname) <= self.upper_limit

    def update_values(self):
        """
        >>> se = ScalingExp({'ni':10, 'nk:1'}, 1, 'ni:2:1000')
        >>> se.update_values()
        >>> se.ni
        20
        >>> se.nk
        1
        """
        setattr(self, self.varname, int(getattr(self, self.varname) * self.scale_factor))

    def values(self, incl_threads=True):
        results = [getattr(self, name) for name in self.args]
        if incl_threads:
            results.append(self.threads)
        return tuple(results)

    def plot(self, results):
        prov_msg = "Provenance: "
        item_list = [(name, getattr(self, name)) for name in self.args]
        item_list.append("threads", self.threads)
        for name, val in item_list:
            if name != self.varname:
                prov_msg += " {}={}".format(name, val)

        st, out, _ = run_cmd("git rev-parse --short HEAD")
        git_commit = out if st == 0 else "Unknown"
        print("{} machine={} commit={}".format(prov_msg, socket.gethostname().split(".")[0], git_commit))

        for test_name, test_results in results.iteritems():
            print(test_name, self.varname)
            for test_result in test_results:
                cols, med_time = test_result[0], test_result[-1]
                cols_sec = float(cols) / med_time
                print("{}, {:.2f}".format(getattr(self, self.varname), cols_sec))

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} <NAME>:<VALUE> [<NAME>:<VALUE>] [--cxx=<CXX_COMPILER>] [-n num_runs] [--verbose]
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run p3 ref with 1 horizontal and 111 vertical columns over 300s with 30s timesteps and 10 internal repitions \033[0m
    > {0} ni:1 nk:111 dt:30 ts:10 repeat:10 --kokkos=/home/jgfouca/kokkos-install/install --test=micro-sed/p3_ref

    \033[1;32m# Run p3 ref comparing against p3 vanilla with same params as above except scaling ni to 1024  \033[0m
    > {0} ni:1 nk:111 dt:30 ts:10 repeat:10 --kokkos=/home/jgfouca/kokkos-install/install --test=micro-sed/p3_ref --test=micro-sed/p3_vanilla -s ni:2:1024
""".format(os.path.basename(args[0])),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("argmap", nargs="+", help="Argument map, NAME:STARTING_VAL. First arg is assumed to be the arg/s used in the core metric")

    parser.add_argument("--kokkos", help="Kokkos location")

    parser.add_argument("--cxx", default=os.getenv("CXX"), help="c++ compiler")

    parser.add_argument("-n", "--num-runs", type=int, default=1, help="Number of times to repeat run")

    parser.add_argument("-t", "--test", dest="tests", action="append",
                        help="Select which tests to run, default is all. First one will be used as reference point")

    parser.add_argument("-c", "--cmake-options", default="",
                        help="Extra options to pass to cmake")

    parser.add_argument("-u", "--use-existing", action="store_true",
                        help="Use existing build directory (assumes pwd is build dir)")

    parser.add_argument("-s", "--scaling",
                        help="Do a scaling experiment. Format is VARNAME:SCALE_FACTOR:MAX")

    parser.add_argument("-p", "--plot-friendly", action="store_true",
                        help="Project plot-friendly output")

    parser.add_argument("-T", "--force-threads", type=int, help="Override the machine default for threads.")

    args = parser.parse_args(args[1:])

    expect(args.kokkos, "--kokkos is currently required")

    args.cmake_options += " -DCMAKE_BUILD_TYPE=Release -DKokkos_DIR={}".format(args.kokkos)
    if args.cxx:
        args.cmake_options += " -DCMAKE_CXX_COMPILER={}".format(args.cxx)

    expect(not args.plot_friendly or args.scaling, "Doesn't make sense to have plot friendly output without a scaling experiment")

    argmap = OrderedDict()
    for argdef in args.argmap:
        expect(argdef.count(":") == 1, "Arg definition '{}' had wrong format, expect NAME:VAL")
        argname, starting_val = argdef.split(":")
        argmap[argname] = float(starting_val) if "." in starting_val else int(starting_val)

    if args.scaling is None:
        scaling_exp = ScalingExp(argmap, args.force_threads, "{}:2.0:{}".format(list(argmap.keys())[0], list(argmap.values())[0]))
    else:
        scaling_exp = ScalingExp(argmap, args.force_threads, args.scaling)
        expect(not (scaling_exp.varname == "threads" and args.force_threads is None),
               "Need to set --force-threads if doing a threading scaling experiment")

    delattr(args, "scaling")
    delattr(args, "kokkos")
    delattr(args, "cxx")
    args.scaling_exp = scaling_exp
    args.argmap = argmap
    return args

###############################################################################
class PerfAnalysis(object):
###############################################################################

    ###########################################################################
    def __init__(self, argmap, force_threads, num_runs, tests, cmake_options, use_existing, scaling_exp, plot_friendly):
    ###########################################################################
        self._argmap        = argmap
        self._force_threads = force_threads
        self._num_runs      = num_runs
        self._tests         = tests
        self._cmake_options = cmake_options
        self._use_existing  = use_existing
        self._scaling_exp   = scaling_exp
        self._plot_friendly = plot_friendly

    ###############################################################################
    def build(self):
    ###############################################################################
        with open("build.perf.log", "w") as fd:
            cmake_cmd = "cmake {} ..".format(self._cmake_options)
            make_cmd  = "make -j8 VERBOSE=1"
            fd.write(cmake_cmd + "\n")
            fd.write(run_cmd_no_fail(cmake_cmd, combine_output=True) + "\n\n")
            fd.write(make_cmd + "\n")
            fd.write(run_cmd_no_fail(make_cmd, combine_output=True) + "\n")

    ###############################################################################
    def get_time(self, output):
    ###############################################################################
        r"""
        >>> output = 'Foo\nTime = 0.047 seconds.\nbar'
        >>> get_time(output)
        0.047
        >>> output = 'Foo\nTime = 1.732e+01 seconds.\nbar'
        >>> get_time(output)
        17.32
        """
        regex = re.compile(r'Time\s*=\s*([^\s]+)\s*seconds')
        the_time = None
        for line in output.splitlines():
            m = regex.match(line)
            if m:
                expect(the_time is None, "Multiple matches!")
                the_time = float(m.groups()[0])

        return the_time

    ###############################################################################
    def get_threads(self, output):
    ###############################################################################
        r"""
        >>> output = 'Foo\nARCH: dp 1 avx  FPE 0 nthread 48\nTime = 0.047 seconds.\nbar'
        >>> get_threads(output)
        48
        """
        for line in output.splitlines():
            if "nthread" in line:
                items = line.split()
                threads = int(items[items.index("nthread") + 1])
                return threads

        expect(False, "Failed to find threads in:\n\n{}".format(output))

    ###############################################################################
    def run_test(self, exename):
    ###############################################################################
        self.machine_specific_init(self._scaling_exp.threads)
        self.test_specific_init(exename, self._scaling_exp.threads)
        prefix = "" if "NUMA_PREFIX" not in os.environ else "{} ".format(os.environ["NUMA_PREFIX"])
        cmd = "{}./{} {}".format(prefix, exename, " ".join([str(item) for item in self._scaling_exp.values(incl_threads=False)]))
        results = []
        with open("{}.perf.log".format(exename), "w") as fd:
            fd.write(cmd + "\n\n")
            fd.write("ENV: \n{}\n\n".format(run_cmd_no_fail("env")))
            for _ in range(self._num_runs):
                output = run_cmd_no_fail(cmd, verbose=not self._plot_friendly)
                fd.write(output + "\n\n")
                results.append(self.get_time(output))

            threads = self.get_threads(output)

        return median(results), threads

    ###############################################################################
    def user_explain(self, test, med_time, reference):
    ###############################################################################
        msg = "{} ran in {} seconds".format(test, med_time)
        if reference:
            speedup = (1.0 - (med_time / reference)) * 100
            msg += ", speedup={:.2f}%".format(speedup)

        print(msg)

    ###############################################################################
    def perf_analysis(self):
    ###############################################################################
        if self._use_existing:
            expect(os.path.isdir("p3") and os.path.exists("CMakeCache.txt"),
                   "{} doesn't look like a build directory".format(os.getcwd()))

        else:
            expect(os.path.basename(os.getcwd()) == "micro-apps", "Please run from micro-apps directory")

            tmpdir = tempfile.mkdtemp(prefix="build", dir=os.getcwd())
            os.chdir(tmpdir)

            if not self._plot_friendly:
                print("BUILDING")

            self.build()

        results = {}
        while (self._scaling_exp.should_continue()):
            if not self._plot_friendly:
                print()
                print("RUNNING {}".format(" ".join(["{}={}".format(name, val) for name, val in zip(self._argmap.keys(), self._scaling_exp.values(incl_threads=False))])))

            reference = None
            for test in self._tests:
                med_time, threads = self.run_test(test)
                self._scaling_exp.threads = threads

                if self._plot_friendly:
                    results.setdefault(test, []).append((*self._scaling_exp.values(), med_time))
                else:
                    self.user_explain(test, med_time, reference)

                reference = med_time if reference is None else reference

            self._scaling_exp.update_values()

        if self._plot_friendly:
            self._scaling_exp.plot(results)

        return True

    ###############################################################################
    def test_specific_init(self, exename, force_threads):
    ###############################################################################
        host = socket.gethostname()

        # This appears to be slower with 48
        #if "blake" in host and exename == "p3_ref":
        #    os.environ["OMP_NUM_THREADS"] = "48"

        if force_threads:
            os.environ["OMP_NUM_THREADS"] = str(force_threads)

    ###############################################################################
    def machine_specific_init(self, force_threads=None):
    ###############################################################################
        host = socket.gethostname()
        force_threads = self._force_threads if force_threads is None else force_threads

        if "bowman" in host:
            os.environ["KMP_AFFINITY"] = "balanced,granularity=fine"
            os.environ["OMP_NUM_THREADS"] = "272"
            os.environ["NUMA_PREFIX"] = "numactl -i 1"
        elif "blake" in host:
            os.environ["KMP_AFFINITY"] = "balanced,granularity=fine"
            os.environ["OMP_NUM_THREADS"] = "96"

        if force_threads:
            os.environ["OMP_NUM_THREADS"] = str(force_threads)

###############################################################################
def _main_func(description):
###############################################################################
    pa = PerfAnalysis(**vars(parse_command_line(sys.argv, description)))

    pa.machine_specific_init()

    success = pa.perf_analysis()

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
