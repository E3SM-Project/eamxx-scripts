#!/usr/bin/env python

"""
Plot results from perf_analysis
"""

from utils import run_cmd_no_fail, expect, check_minimum_python_version
check_minimum_python_version(2, 7)

import matplotlib.pyplot as plt

import argparse, sys

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} <DATAFILE>
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Plot data file \033[0m
    > {0} data
""".format(os.path.basename(args[0])),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("datafile", help="Data file to plot")

    args = parser.parse_args(args[1:])

    return args.datafile

###############################################################################
def plotdata(datafile):
###############################################################################
    xs, ys = [], []
    name = None
    xlabel = None
    with open(datafile, "r") as fd:
        for line in fd.readlines():
            line = line.strip()
            if "," in line:
                x, y = [float(item) for item in line.split(", ")]
                xs.append(x)
                ys.append(y)
            elif line != "":
                if xs:
                    plt.plot(xs, ys, label=name)
                    xs = []
                    ys = []

                name, xlabel = line.split()

    plt.plot(xs, ys, label=name)

    return True

###############################################################################
def _main_func(description):
###############################################################################
    datafile = parse_command_line(sys.argv, description)

    success = plotdata(datafile)

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
