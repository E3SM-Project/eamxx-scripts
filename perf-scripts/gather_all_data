#!/usr/bin/env python

"""
Gather all performance data on all platforms of interest and store
them in a git branch.

It is expected that you are able to do a passwordless ssh to all
machines and that the given repo on the target machines are clean.

It is expected that your current repo is clean and that your current commit
is the one you want to test.
"""

from utils import run_cmd_no_fail, run_cmd, expect, check_minimum_python_version, median
check_minimum_python_version(2, 7)

import argparse, sys, os, threading, time

# MACHINE -> (modules, repo-loc, kokkos-install-loc, compiler, batch submit prefix)
MACHINE_METADATA = {
    "bowman"   : (["intel/compilers/18.2.199", "git/2.8.2",  "cmake/3.5.2"], "~/scream-docs-perf-bowman",    "~/kokkos-install-bowman/install", "$(which icpc)",                    "srun"),
    "blake"    : (["intel/compilers/18.1.163", "git/2.9.4",  "cmake/3.9.0"], "~/scream-docs-perf-blake",     "~/kokkos-install-blake/install",  "$(which icpc)",                    "srun"),
    "waterman" : (["gcc/7.2.0", "cuda/9.2.88", "git/2.10.1", "cmake/3.9.6"], "~/scream-docs-perf-waterman",  "~/kokkos-install/install",        "$kokkos_install/bin/nvcc_wrapper", "bsub -I -q rhel7W"),
}

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} <PERF-ANALYSIS-ARGS> [--verbose]
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Gather data \033[0m
    > {0} '64 128 300 30 $kokkos_install --cxx=$compiler -t fortran -t pack -s "ni:2.0:8192" -n 10'
    # NOTE: leave the variables in the args unresolved so the script can resolve them
""".format(os.path.basename(args[0])),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("perf_analysis_args", help="Args to pass to perf_analysis")

    time_tuple = time.localtime()
    default_branch = "performance-{}".format(time.strftime("%Y_%m_%d", time_tuple))
    parser.add_argument("-b", "--branch-name", default=default_branch, help="Branch name to use for branch to gather data")

    parser.add_argument("-m", "--machine", action="append", choices=MACHINE_METADATA.keys(),
                        help="Select which machines to run on, default is all")

    expect(os.path.basename(os.getcwd()) == "micro-apps", "Please run from micro-apps directory")

    args = parser.parse_args(args[1:])

    if not args.machine:
        args.machine = MACHINE_METADATA.keys()

    return args.perf_analysis_args, args.branch_name, args.machine

###############################################################################
def formulate_command(machine, perf_analysis_args, branch):
###############################################################################
    modules, repo, kokkos, compiler, batch = MACHINE_METADATA[machine]

    pargs = perf_analysis_args.replace("$compiler", compiler)
    pargs = pargs.replace("$kokkos_install", kokkos)

    cmd = "cd {} && module load {} && git fetch && git checkout {} && {} ../perf-scripts/perf_analysis {}".format(os.path.join(repo, "micro-apps"), " ".join(modules), branch, batch, pargs)

    return cmd

###############################################################################
def run_on_machine(machine, perf_analysis_args, branch):
###############################################################################
    cmd = formulate_command(machine, perf_analysis_args, branch)
    print "Starting performance analysis on {} with cmd: {}\n".format(machine, cmd),

    output = run_cmd_no_fail("ssh {} '{}'".format(machine, cmd))
    with open(os.path.join("perf-results", branch, machine), "w") as fd:
        fd.write(output)

    print "Completed performance analysis on {}\n".format(machine),

###############################################################################
def gather_all_data(perf_analysis_args, branch, machines):
###############################################################################
    os.mkdir(os.path.join("perf-results", branch))
    run_cmd_no_fail("git checkout -b {} && git push -u origin {}".format(branch, branch))

    threads_in_flight = []
    for machine in machines:
        new_thread = threading.Thread(target=run_on_machine, args=(machine, perf_analysis_args, branch))
        new_thread.start()
        threads_in_flight.append(new_thread)

    for thread_in_flight in threads_in_flight:
        thread_in_flight.join()

###############################################################################
def _main_func(description):
###############################################################################
    perf_analysis_args, branch, machines
        parse_command_line(sys.argv, description)

    success = gather_all_data(perf_analysis_args, branch, machines)

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
